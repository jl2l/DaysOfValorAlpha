using UnityEngine;
using System.Collections;
using System.Collections.Generic;

using Assets;
using System;
using static Assets.CountryRelationsFactory;
using WorldMapStrategyKit;
using System.Linq;
using UnityEngine.UI;

[System.Serializable]
public class CountryGovernment : ScriptableObject
{
    public List<Tuple<CountryToGlobalCountry.GenericCountry, WorldEvent>> CountryHistory;
    public List<DiplomaticEvent> GovernmentHistoryWithPlayer;
 
    public List<CountryToGlobalCountry.GenericProvince> ControlsProvincesNames;
    
    public List<CountryToGlobalCountry.GenericCountry> ControlCountriesNames;
    public List<CountryToGlobalCountry.GenericCountryInfrastructure> ControlCountryCriticalInfrastructure;
    [Header("Heads of State")]
    public Contact ContactOfHeadOfState;
    public bool AutoGeneratedHeadOfState;

    public Contact ContactOfHeadOfMilitary;
    public bool AutoGeneratedHeadOfMilitary;

    public Contact ContactOfPlayerAmbassdor;
    public bool AutoGeneratedPlayerAmbassdor;

    public Contact ContactOfHeadOfEconomic;
    public bool AutoGeneratedHeadOfEconomic;
    [Tooltip("If the Master game player is this government")]

    public bool IsMasterPlayer;

    [Tooltip("If the human player other than client")]

    public bool IsHumanPlayer;

    [Tooltip("If the player is this AI controlled")]

    public bool IsAIPlayer;

    [Header("Trust Levels")]

    /// <summary>
    ///  How much the country government trusts yours 1- 100
    /// </summary>
    [Range(0.0f, 100.0f)]
    public float PlayerTrustLevel;

    /// <summary>
    /// How much the country likes yours
    /// </summary>
    [Range(0.0f, 100.0f)]
    public float PlayerPopulationTrustLevel;
    /// <summary>
    /// How much the military trusts the government and vice
    /// </summary>
    [Range(0.0f, 100.0f)]
    public float MilitaryGovernmentTrustLevel;
    [Range(0.0f, 100.0f)]
    public float GovernmentMilitaryTrustLevel;

    /// <summary>
    /// The overall political stablity of the various parties
    /// </summary>

    [Range(0.0f, 100.0f)]
    public float PoliticalStablity;
    [Range(0.0f, 100.0f)]
    public float PoliticalCorruption;

    /// <summary>
    /// How much the people of the country trust there government
    /// </summary>
    [Range(0.0f, 100.0f)]
    public float PopulationTrustLevel;




    //the HEX grids you control based on the provinces and countries you own
    /// <summary>
    /// If this is true then all provinces are under control
    /// </summary>
    public bool IsInTotalControlOfCountry;
    public bool IsRebelGroup;
    public bool IsTerroristGroup;
    [Header("Cabinet Titles")]

    [Tooltip("This will add a Ministry Of in for the of the text")]
    [ContextMenuItem("Set Minstry", "MinstryOf")]
    public bool MinistryOf;
    public string TitleOfEconomic;

    public string TitleOfMilitary;
    public string TitleOfState;
    public string TitleOfInternal;
    public string TitleOfTrade;
    public string TitleOfJustice;
    public string TitleOfResearch;
    public string TitleOfIntel;
    public string TitleOfCulture;
    public string TitleOfEducation;
    public string TitleOfEnergy;
    public string TitleOfHealth;
    public string TitleOfEnvironment;
    public string TitleOfAgriculture;
    public string TitleOfStatePolice;
    public string TitleOfStateSecertService;
    public string TitleOfPopulation;

    public string TitleOfHeadOfState;

    private void MinstryOf()
    {

        MinistryOf = true;

        var min = "Minstry of {0}";

        TitleOfEconomic = string.Format(min, TitleOfEconomic);
        TitleOfMilitary = string.Format(min, TitleOfMilitary);
        TitleOfState = string.Format(min, TitleOfState);
        TitleOfInternal = string.Format(min, TitleOfInternal);
        TitleOfTrade = string.Format(min, TitleOfTrade);
        TitleOfJustice = string.Format(min, TitleOfJustice);
        TitleOfResearch = string.Format(min, TitleOfResearch);
        TitleOfIntel = string.Format(min, TitleOfIntel);
        TitleOfCulture = string.Format(min, TitleOfCulture);
        TitleOfEducation = string.Format(min, TitleOfEducation);
        TitleOfEnergy = string.Format(min, TitleOfEnergy);
        TitleOfHealth = string.Format(min, TitleOfHealth);
        TitleOfStatePolice = string.Format(min, TitleOfStatePolice);
        TitleOfStateSecertService = string.Format(min, TitleOfStateSecertService);
    }

    [Header("National Power")]

    [Tooltip("The baseline techpoints this country has")]
    public float TechLevel;
    /// <summary>
    /// The militaryPower Score is the max number of Decks you can deploy
    /// </summary>
    [Tooltip("The baseline points for military actions and wars country has 1000 * MilitaryPowerIndex (0.0804 = points available")]
    public float MilitaryPowerScore;

    /// <summary>
    /// The max number of intel points you can field this inclues operations agents, spy missions, and other plots depending on complexity and who
    /// its against the intel action will have a score you can only conduce so many intel operations at time based on how many points you intel has
    /// </summary>
    [Tooltip("The baseline intel points for survaliance counter intel and intel actions this country has this is the rate in Millions ie $492 million is 492")]
    public float IntelPowerScore;

    /// <summary>
    /// same concept for trade deals
    /// </summary>
    [Tooltip("The baseline techpoints for sector growth and trading of resources, research and developer, deals and research this country has")]
    public float EconomicPowerScore;

    /// <summary>
    /// The soft power score is a buffer against for all deals it adds to the overall effectivness of the country government 
    /// </summary>
    [Tooltip("The baseline points for cultral diplomacy and alliances etc this country has")]
    public float SoftPowerScore;
    /// <summary>
    /// The closer to 1 the more inequality in the country
    /// </summary>
    [Range(0.0f, 1.0f)]
    public float Gini;

    /// <summary>
    /// The closer to 1 the more developed the country is edu income and life expectancy
    /// </summary>

    [Range(0.0f, 1.0f)]
    public float HDI;

    public bool MilitaryConscription;
    /// <summary>
    /// Does the player have a embassy in this government
    /// </summary>
    public bool PlayerHasEmbassy;
    public bool PlayerEmbassyOpen;

    public bool OpenBorderImmigration;
    public bool OpenBorderEmmigration;


    [ContextMenuItem("UpdatePopulaton", "UpdatePopulations")]
    public long RawPopulation;
    private void UpdatePopulations()
    {

        DemographicGroups.ForEach(e =>
        {
            double newPopulation = (e.Population / 100) * RawPopulation;
            e.Numbers = Convert.ToInt64(newPopulation);
        });
    }




    [Tooltip("Rapid population growth can be seen as threatening by neighboring countries.")]
    [Range(-100.0f, 100.0f)]
    public float GrowwthRate;
    [Range(-1000.0f, 1000.0f)]
    public float DeathRate;
    [Range(-1000.0f, 1000.0f)]
    public float BirthRate;
    [Range(-100.0f, 100.0f)]
    public float MirgrationRate;
    /// <summary>
    /// the formal name of the government of organization
    [Tooltip("When playing with UN enabled this will make the more stable, force all AI to behave ")]
    public bool IsUNMember;
    public bool IsSecurityMember;
    public bool IsPermSecurityMember;
    public string NameOfGovernment;
    [Tooltip("If you want to use foreign characters ie Федерация")]
    public string LocalNameOfGovernment;
    public string MapLookUpName;
    [Tooltip("If you want to pick custom names from the list use the name here ie India wil get indian sounding names")]
    public string CustomRegionName;
    public string GovernmentAbbreviation;
    /// <summary>
    /// Closer to 0 left wing 1 right 
    /// </summary>
    [Tooltip(" The baseline len of the government at the start of the game, Closer to 0 left wing 1 rightwing")]
    [Range(-1.0f, 1.0f)]
    public float GovernmentIdeologyIndex;
    public CountryGovernmentTypes GovernmentType;
    [Tooltip("If you want to use the historic bias to build up the country allies and rivals")]
    public CountryBias GovernmnetBias;
    public RawImage CountryFlag;
    public List<CountryFlawSkill> CountryFlaws;
    public List<CountryPerkSkill> CountrPerks;
    public CountrySpokeLanguage CountrySpokenLanguage;
    public BudgetSize CountrBugetScale;
    public List<string> Allies;
    public List<string> Rivals;
    public CountryToGlobalCountry.GenericProvince CaptialProvince;

    [ContextMenuItem("Fil From World Map", "GetFromMap")]
    public CountryToGlobalCountry.GenericCountry CountryOfGovernment;

    private void GetFromMap()
    {
        var localMap = WMSK.instance;
        var countryIndex = localMap.GetCountryIndex(MapLookUpName);

        var localCountry = localMap.GetCountry(countryIndex);
        var captialCity = localMap.cities.FirstOrDefault(e => e.countryIndex == countryIndex && e.cityClass == CITY_CLASS.COUNTRY_CAPITAL);
        var captialProvinceName = captialCity.province;
        CaptialName = captialCity.name;

        var captialProvince = localMap.GetProvince(captialProvinceName, localCountry.name);
        CountryOfGovernment.index = localCountry.uniqueId;
        CountryOfGovernment.name = localCountry.name;
        CountryOfGovernment.regionName = CustomRegionName.Length > 0 ? CustomRegionName : localCountry.continent;

        CaptialProvince.index = captialProvince.uniqueId;
        CaptialProvince.name = captialProvince.name;
        CaptialProvince.location.x = captialProvince.center.x;
        CaptialProvince.location.y = captialProvince.center.y;
        ControlsProvincesNames.Clear();
        for (int i = 0; i < localCountry.provinces.Length; i++)
        {
            var selectedProvince = localCountry.provinces[i];
            var newProvince = new CountryToGlobalCountry.GenericProvince(selectedProvince.name);
            newProvince.index = selectedProvince.uniqueId;
            newProvince.countryIndex = countryIndex;
            newProvince.location.x = selectedProvince.center.x;
            newProvince.location.y = selectedProvince.center.y;
            ControlsProvincesNames.Add(newProvince);
        }
    }
    public string CaptialName;
    public int FoundingYear;
    public DateTime CountryFounding;
    public DateTime GovernmentNextElection;
    [Header("Laws Demo, Political Parties")]
    #region Social Rights

    public List<CountryLaw> Laws;
    public List<PoliticalParties> PoliticalParties;
    public List<DemographicGroups> DemographicGroups;
    public List<ResearchItem> CountryKnownResearch;


    #endregion

    public CountryMilitary Military;
}
